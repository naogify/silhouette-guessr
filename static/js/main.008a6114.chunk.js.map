{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["geolonia","window","initialMarker","Marker","color","draggable","guessedMarker","App","mapNode","useRef","mapDiv","scoreDiv","initialLngLats","lng","lat","initialLngLat","useMemo","max","Math","floor","random","useState","guessedLngLat","setGuessedLngLat","useLayoutEffect","current","Map","container","style","interactive","center","zoom","pitch","on","event","setLngLat","lngLat","addTo","view","FirstPersonView","far","controller","keyboard","moveSpeed","inertia","terrainLayer","TerrainLayer","id","minZoom","maxZoom","elevationDecoder","rScaler","gScaler","bScaler","offset","elevationData","texture","wireframe","pickable","opacity","tile3DLayer","Tile3DLayer","pointSize","data","loader","Tiles3DLoader","ref","Button","onClick","initial","guessed","fromPoints","toPoints","from","point","to","actualDistance","distance","innerHTML","round","addSource","addLayer","calculateDistance","variant","views","mapStyle","initialViewState","longitude","latitude","bearing","maxPitch","minPitch","position","layers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.008a6114.chunk.js","sourcesContent":["import React, { useRef, useLayoutEffect, useState, useMemo } from \"react\"\nimport DeckGL from '@deck.gl/react'\nimport {TerrainLayer, Tile3DLayer} from '@deck.gl/geo-layers'\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles'\nimport {FirstPersonView} from '@deck.gl/core'\nimport distance from '@turf/distance';\nimport {point} from '@turf/helpers';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst { geolonia } = window\n\nconst initialMarker = new geolonia.Marker({\n  color: \"#FF0000\",\n  draggable: true,\n})\n\nconst guessedMarker = new geolonia.Marker({\n  color: \"#FF0000\",\n  draggable: true\n})\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * max);\n}\n\nfunction App() {\n  const mapNode = useRef(null)\n  const mapDiv = useRef(null)\n  const scoreDiv = useRef(null)  \n  const initialLngLats = [\n    {lng: 139.746247, lat: 35.659103},\n    {lng: 139.775039823498, lat: 35.62688839051935},\n    {lng: 139.7425465928838, lat: 35.62901450284541},\n    {lng: 139.73098887729316, lat: 35.634774933759935},\n    {lng: 139.73084512638385, lat: 35.64045446313923},\n    {lng: 139.73081620816902, lat: 35.64998949295825},\n    {lng: 139.726025422902, lat: 35.652420489771295},\n    {lng: 139.7410097090811, lat: 35.65267872518089},\n    {lng: 139.75412546592008, lat: 35.665835434143766},\n    {lng: 139.73210944808986, lat: 35.67121154298727},\n    {lng: 139.7148656884602, lat: 35.66547356765915},\n    {lng: 139.7303179953378, lat: 35.676509652592905},\n    {lng: 139.75763097559113, lat: 35.665074208904436},\n  ]\n  const initialLngLat = useMemo(() => initialLngLats[getRandomInt(14)], [])\n  const [guessedLngLat, setGuessedLngLat] = useState(null);\n  \n  useLayoutEffect(() => {\n\n    if (!mapDiv.current) { return }\n    if (mapNode.current !== null) { return }\n\n    mapNode.current = new geolonia.Map({\n      container: mapDiv.current,\n      style: 'geolonia/basic',\n      interactive: true,\n      center: [initialLngLat.lng, initialLngLat.lat],\n      zoom: 10,\n      pitch: 0,\n    })\n\n    mapNode.current.on('click', event => {\n      guessedMarker\n        .setLngLat(event.lngLat)\n        .addTo(mapNode.current);\n      \n      setGuessedLngLat(event.lngLat)\n    })\n\n  }, [mapDiv, initialLngLat.lng, initialLngLat.lat])\n\n  const calculateDistance = (initial, guessed) => {\n\n    if (!initial || !guessed) {\n      return false\n    }\n\n    const fromPoints = [guessed.lng, guessed.lat]\n    const toPoints = [initial.lng, initial.lat]\n\n    const from = point(fromPoints);\n    const to = point(toPoints);\n    const actualDistance = distance(from, to) * 1000\n\n    scoreDiv.current.innerHTML = `${Math.round(actualDistance)}m`\n\n    initialMarker\n      .setLngLat(initial)\n      .addTo(mapNode.current);\n\n    mapNode.current.addSource('line-marker', {\n      'type': 'geojson',\n      'data': {\n        'type': 'Feature',\n        'properties': {},\n        'geometry': {\n          'type': 'LineString',\n          'coordinates': [fromPoints, toPoints]\n          }\n        }\n    });\n\n    mapNode.current.addLayer({\n        'id': 'line',\n        'type': 'line',\n        'source': 'line-marker',\n        'layout': {\n        },\n        'paint': {\n          'line-color': '#000000',\n          'line-width': 5\n        }\n    });\n  }\n\n  const view = new FirstPersonView({\n    // fovy: 100,\n    far:10000,\n    controller: {\n      keyboard: {\n        moveSpeed: 100,\n      }, \n      inertia: 100\n  }});\n\n  const terrainLayer = new TerrainLayer({\n    id: \"terrain\",\n    minZoom: 0,\n    maxZoom: 14,\n    elevationDecoder: {\n      rScaler: 6553.6,\n      gScaler: 25.6,\n      bScaler: 0.1,\n      offset: -9965\n    },\n    elevationData: 'https://tileserver-dev.geolonia.com/gsi-dem/tiles/{z}/{x}/{y}.png',\n    texture: 'https://cyberjapandata.gsi.go.jp/xyz/seamlessphoto/{z}/{x}/{y}.jpg',\n    wireframe: false,\n    color: [255, 255, 255],\n    pickable: false,\n    opacity: 0.5\n  });\n\n  const tile3DLayer = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    pointSize: 1,\n    data: 'https://raw.githubusercontent.com/naogify/silhouette-gusser/main/public/tile3d/tileset.json',\n    loader: Tiles3DLoader,\n    pickable: true,\n    opacity: 0.8\n  })\n\n  return (\n    <>\n      <div\n        ref={mapDiv}\n        id=\"mini-map\"\n      />\n      <div\n        ref={scoreDiv}\n        id=\"score\"\n      ></div>\n      <Button\n        id=\"guess-btn\"\n        onClick={()=> calculateDistance(initialLngLat, guessedLngLat)}\n        variant=\"primary\"\n      >Guess</Button>\n      <DeckGL\n        views={view}\n        mapStyle={'geolonia/gsi'}\n        initialViewState={{\n          longitude: initialLngLat.lng,\n          latitude: initialLngLat.lat,\n          pitch: 0,\n          bearing: 0,\n          maxPitch: 0,\n          minPitch: 0,\n          position: [0, 0, 100]\n        }}\n        controller={true}\n        layers={[terrainLayer, tile3DLayer]}\n      />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
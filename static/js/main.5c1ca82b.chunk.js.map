{"version":3,"sources":["util.js","App.js","reportWebVitals.js","index.js"],"names":["geolonia","window","initialMarker","Marker","color","draggable","guessedMarker","initialLngLats","lng","lat","App","mapNode","useRef","mapDiv","scoreDiv","useState","guessedLngLat","setGuessedLngLat","initialLngLat","useMemo","max","Math","floor","random","longitude","latitude","zoom","pitch","bearing","maxPitch","minPitch","position","initialViewState","setInitialViewState","goToStart","useCallback","transitionInterpolator","FlyToInterpolator","useLayoutEffect","current","Map","container","style","interactive","center","on","event","setLngLat","lngLat","addTo","view","FirstPersonView","far","controller","keyboard","moveSpeed","terrainLayer","TerrainLayer","id","minZoom","maxZoom","elevationDecoder","rScaler","gScaler","bScaler","offset","elevationData","texture","wireframe","material","pickable","opacity","tile3DLayer","Tile3DLayer","data","loader","Tiles3DLoader","loadOptions","tileset","throttleRequests","maxRequests","maximumMemoryUsage","viewDistanceScale","updateTransforms","loadTiles","ref","Button","onClick","initial","guessed","fromPoints","toPoints","from","point","to","actualDistance","distance","innerHTML","round","addSource","addLayer","calculateDistance","variant","className","views","mapStyle","layers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c1ca82b.chunk.js","sourcesContent":["import distance from '@turf/distance';\nimport {point} from '@turf/helpers';\nconst { geolonia } = window\n\nconst initialMarker = new geolonia.Marker({\n  color: \"#FF0000\",\n  draggable: true,\n})\n\nconst guessedMarker = new geolonia.Marker({\n  color: \"#FF0000\",\n  draggable: true\n})\n\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * max);\n}\n\nconst initialLngLats = [\n  {lng: 139.746247, lat: 35.659103},\n  {lng: 139.775039823498, lat: 35.62688839051935},\n  {lng: 139.7425465928838, lat: 35.62901450284541},\n  {lng: 139.73098887729316, lat: 35.634774933759935},\n  {lng: 139.73084512638385, lat: 35.64045446313923},\n  {lng: 139.73081620816902, lat: 35.64998949295825},\n  {lng: 139.726025422902, lat: 35.652420489771295},\n  {lng: 139.7410097090811, lat: 35.65267872518089},\n  {lng: 139.75412546592008, lat: 35.665835434143766},\n  {lng: 139.73210944808986, lat: 35.67121154298727},\n  {lng: 139.7148656884602, lat: 35.66547356765915},\n  {lng: 139.7303179953378, lat: 35.676509652592905},\n  {lng: 139.75763097559113, lat: 35.665074208904436},\n]\n\nconst calculateDistance = (initial, guessed, mapNode, scoreDiv) => {\n\n  if (!initial || !guessed) {\n    return false\n  }\n\n  const fromPoints = [guessed.lng, guessed.lat]\n  const toPoints = [initial.lng, initial.lat]\n\n  const from = point(fromPoints);\n  const to = point(toPoints);\n  const actualDistance = distance(from, to) * 1000\n\n  scoreDiv.current.innerHTML = `${Math.round(actualDistance)}m`\n\n  initialMarker\n    .setLngLat(initial)\n    .addTo(mapNode.current);\n\n  mapNode.current.addSource('line-marker', {\n    'type': 'geojson',\n    'data': {\n      'type': 'Feature',\n      'properties': {},\n      'geometry': {\n        'type': 'LineString',\n        'coordinates': [fromPoints, toPoints]\n        }\n      }\n  });\n\n  mapNode.current.addLayer({\n      'id': 'line',\n      'type': 'line',\n      'source': 'line-marker',\n      'layout': {\n      },\n      'paint': {\n        'line-color': '#000000',\n        'line-width': 5\n      }\n  });\n}\n\nexport {guessedMarker, getRandomInt, initialLngLats, calculateDistance}","import React, { useRef, useLayoutEffect, useState, useMemo, useCallback } from \"react\"\nimport DeckGL from '@deck.gl/react'\nimport {TerrainLayer, Tile3DLayer} from '@deck.gl/geo-layers'\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles'\nimport {FirstPersonView, FlyToInterpolator} from '@deck.gl/core'\nimport {guessedMarker, getRandomInt, initialLngLats, calculateDistance} from './util'\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst { geolonia } = window\n\nfunction App() {\n  const mapNode = useRef(null)\n  const mapDiv = useRef(null)\n  const scoreDiv = useRef(null)  \n  const [guessedLngLat, setGuessedLngLat] = useState(null);\n\n  const initialLngLat = useMemo(() => { \n    return initialLngLats[getRandomInt(14)] \n  }, [])\n  \n  const [initialViewState, setInitialViewState] = useState({\n    longitude: initialLngLat.lng,\n    latitude: initialLngLat.lat,\n    zoom: 11,\n    pitch: 45,\n    bearing: 0,\n    maxPitch: 50,\n    minPitch: 0,\n    position: [0, 100, 500]\n  });\n\n  const goToStart = useCallback(() => {\n\n    setInitialViewState({\n      longitude: initialLngLat.lng,\n      latitude: initialLngLat.lat,\n      zoom: 11,\n      pitch: 45,\n      bearing: 0,\n      position: [0, 100, 500],\n      transitionInterpolator: new FlyToInterpolator()\n    })\n  }, [initialLngLat]);\n  \n  useLayoutEffect(() => {\n\n    if (!mapDiv.current) { return }\n    if (mapNode.current !== null) { return }\n\n    mapNode.current = new geolonia.Map({\n      container: mapDiv.current,\n      style: 'geolonia/basic',\n      interactive: true,\n      center: [initialLngLat.lng, initialLngLat.lat],\n      zoom: 11.5,\n      pitch: 0,\n    })\n\n    mapNode.current.on('click', event => {\n      guessedMarker\n        .setLngLat(event.lngLat)\n        .addTo(mapNode.current);\n      \n      setGuessedLngLat(event.lngLat)\n    })\n\n  }, [mapDiv, initialLngLat.lng, initialLngLat.lat])\n\n  const view = new FirstPersonView({\n    far:3000,\n    controller: {\n      keyboard: {\n        moveSpeed: 10000,\n      }, \n  }});\n\n  /**\n   * このサンプルで使用しているDEMタイルは無料で使っていただいても問題ありませんが、まだテスト中のため予告なく仕様変更されたり、削除されたりする可能性がありますので、あらかじめご了承ください。\n   */\n  const terrainLayer = new TerrainLayer({\n    id: \"terrain\",\n    minZoom: 0,\n    maxZoom: 14,\n    elevationDecoder: {\n      rScaler: 6553.6,\n      gScaler: 25.6,\n      bScaler: 0.1,\n      offset: -9965\n    },\n    elevationData: 'https://tileserver.geolonia.com/gsi-dem/tiles/{z}/{x}/{y}.png?v=1.0.0%2B497d8d48d54c79041032ae681e92e691&key=YOUR-API-KEY',\n    texture: 'https://cyberjapandata.gsi.go.jp/xyz/seamlessphoto/{z}/{x}/{y}.jpg',\n    wireframe: false,\n    material: false,\n    color: [211,211,211],\n    pickable: false,\n    opacity: 0.1\n  });\n\n  const tile3DLayer = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    data: 'https://raw.githubusercontent.com/naogify/silhouette-guessr/main/public/tile3d/tileset.json',\n    loader: Tiles3DLoader,\n    loadOptions: {\n      tileset: {\n        throttleRequests: true,\n        maxRequests: 500,\n        maximumMemoryUsage: 600,\n        viewDistanceScale: 0.5,\n        updateTransforms: false,\n        loadTiles: false\n      },\n    },\n    color: [255,255,255],\n    pickable: false,\n    opacity: 0.6\n  })\n\n  return (\n    <>\n      <div\n        ref={mapDiv}\n        id=\"mini-map\"\n      />\n      <div\n        ref={scoreDiv}\n        id=\"score\"\n      ></div>\n      <Button\n        id=\"guess-btn\"\n        onClick={()=> calculateDistance(initialLngLat, guessedLngLat, mapNode, scoreDiv)}\n        variant=\"primary\"\n      >Guess</Button>\n      <Button\n        className=\"return-start-btn\"\n        onClick={goToStart}\n      >Return to Start</Button>\n      <DeckGL\n        views={view}\n        mapStyle={'geolonia/gsi'}\n        initialViewState={initialViewState}\n        controller={true}\n        layers={[terrainLayer, tile3DLayer]}\n      />\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}